1.fullstack developer
2.backend developer
3.front end developer
4.database developer


java
========================================
1.Core Java
2.JDBC
2.Servlet(JSP-Apache)
3.Spring Framework
    1.spring core
    2.Spring Boot
    2.spring REST-API
    3.Spring Security  
    4.Spring data JPA (JdBC(10)+hybernate(5)+JPA(2))
    5.Spring Batch
========================================
Tools:
========================================
1.Eclipse 
2.STS
3.POSTMAN
4.Logger
5.Swagger
6.maven
7.Git(git-hub)
8.debugging
=========================================

Three Type Software applications
==========================================
1.stand alone application(CoreJava)
2.web application(Servlet-JSP)[corejava+servlet+jsp]
3.distriputed application(REST-API)[corejava+servlet+rest_api)
3.mobile application
===========================================
[java+dot-net](REST_API)

===========================================
DevOps
AWS+Jenkins+Qubernates+Docker
===========================================

Pre-Requirments
===========================================
1.java(oracle+openjdk)(JDK17-java development kit)
    https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html

2.Eclipse(IDE)

3.IntelliJ


1.How to create java project using eclipse?
=========================================

2.How to create Class in java?
=========================================

3.How to create main() in java?
=========================================

4.Why should create main method?
=========================================
without main method we cant run class

5.What is printing statement in java?
=========================================

4.How to create Normal method in java?
=========================================
        //demo-method name
        //()-method signature
        //{}-method body
    
        
        public void demo() {
            
            System.out.println("normal method");    
        }
============================================================

5.How to create varibale Java?

6.How to create object java?
============================================================
1. using new keyword  we can create object

  Welcome w=new Welcome();

  Welcome-class name
  w-reference
  new-predefined keyword
  Welcome()-constructor
===========================================================
7.Where to create object
===========================================================
in main method

===========================================================

7.Why should create object in java?
===========================================================
1.if you want to call normal method we should create object

                 a.How to call normal method using object

                          Welcome w = new Welcome();

===========================================================


8.What is compiler in java?
===============================================
compiler is used convert high level program to low level 
program(byte code)



===================================================================

9.What is low level progrmming
==============================================
1.devloper cannot write low level programming
2.human cannot read low level program
3.machine can read low level program

10.What is high level programming
==============================================
1.devloper can write high level programming
2.human can read high level program
3.machine cannot read high level program


What is class:
======================================
1.Class is a template or logic entity
2.Object contains state and behaviour
                 state-global variable
                 behaviour-methods(bussiness logic)

======================================================
1.can we create multiple main method in single class?
======================================================
yes but parameter cannot be same

           

=========================================
JDK-JRE-JVM

=========================================

1.state
2.bussiness logic
=========================================


Types of methods:
=========================================
1.main method
2.instance method
3.static method
4.final method
5.abstract method

Types of variables:
=============================================================
1.instance variable -or-global variable -or-member variable
=============================================================
        if a variable declared inside the class and outside the method
        is called instance variable

2.static variable;
=========================================
if a variable declared inside the class and outside the method with static keyword  is called static variable

3.local variable
=========================================
1.if a variable declare inside the method is called local variable
2.local variable cannot be reused outside of the method

4.final variable
========================================
1.if a variable declared with final keyword is called final variable
2.final variable is constant we cannot modify

How to reuse the variables-(Scope)?
=========================================

1.local variable can be reused inside the method only
2.instance variable can be reused instance method only
3.static variable can be reused anywhere in the class
4.


Memory
=======================================
1.stack
2.Heap
3.Method area

=======================================
1.lazy intialization
2.eager intialization
=======================================
1.static block
    static{}
2.instance block {}
=======================================
1.static block or main method which one execute dirst
    ans:static block
2.how many time static block will be executed?
     ans:one time
3. how many time instant block  will be executed?   


Debugging
=======================================


JVM Architecture
=======================================
class loader
==========================
1.bootsrap class loader
2.Extension class loader
3.System.loader


memory
==========================
1.Heap memory
2.method area
3.stack memory

Execution Engine
=========================
1.interpreter --Translator
2.JIT Compiler--m1()

===========================================

data types in java
===========================================
1.primitive data type (old, legacy)
2.refrence data type

1.primitive data type
===========================================( based on the memory)
1.byte (loacal,instance,static, final, [static+final] )
2.short
3.int
4.long
5.float
6.double
7.boolean
8.char
============================================= 
2.refrence data type
=============================================
1.array
2.user-defined class[devloper can create user define class]
3.pre-defined class [classes which is available from java liberary ]
=============================================

package:
===========================================
1. it is used to organize the classes
2. it is used to resolve naming conflicts
        
        user-defined package
        pre-defined package
                a.java.lang
                b.java.io
                c.java.util

=============================================

TypeCasting
==========================================
1.up casting
2.down casting


class -vs- object(instance)
=========================================

class:
=========================================
1.class is logical entity, it contains logic of the application
2.Class is a template or blue print
3.we can create class using class keyword
4.we can create multiple opject using single class
          a.user-defined class
          3.pre-defined class

Object
=========================================
1.Object is physical entity represents memory
2.Object is real time entity contains state and behaviours
3.we can create object using new keyword
4.without class we cant create object

=========================================

Looping statements
=========================================
1.for-loop
2.for-each
3.while loop
4.do-while

=========================================

1.for-loop vs for-each?
=========================================



What is array?
=========================================
1.Array is used to store group of objects
2.In Array we cant store hetrogeniuos(different) data
3.Array size is fixed
5.We cant store data in runtime
6.In Array we can store hetrogeniuos data also using Object[]

Array Drawbacks
==========================================

Return type
==========================================
void-nothing return  public void m1(){}

return data
=========================================
if you want to return data we must add return type in method with follow return keyword

public int m1(){
    
    int a=10;
    return a;
}

return keyword
-------------
after return any java code does not work





Return type-(upcasting down casting)
==========================================

int vs Integer
=========================================
int- primitive data type
Integer - Wrapper class
=========================================

Task?
=========================================


Constructor
========================================
1.what is constructor?

      If class name and method name same is called constructor

2.what is default constructor?
      by default devloper no need to implement constructor, while running the
      class jvm will add constructor automatically

3.what is parameter constructor?
      parameter  constructor is used to intilize the variable while constructor loading 

4.How many parameter constructor can we create in single class?
   
   no limitations 

5.what is Zero parameter constructor?
   
   if you want create a object for both parameter constructor and default constructor developer must implement Zero parameter constructor

6. what is copy Constructor?
========================================
  1.if you want create duplicate copy of existing object we can use copy constructor
  2.if you modified duplicate object it will not afftct original object
  3.if you modified original object it will not afftct duplicate object
=========================================
cloning?

7. can we constructor over loading?

8. can we constructor overriding?

9. constructor chaining?

========================================

OOPS-stands for Object oriented project system
===============================================================
1.oop is faster and easier to execute
2.oop provides clear structure for the program
3.oop helps to keep the Java code DRY(Dont Repeat Yourself)
4.oops helps makes the code easier,maintain, modify and debug
===============================================================
inheritance -Types
===============================================================
1.new class is called as child class or subclass
2.existing class is called parent class
3.if we want to achive code re-usability between two classes then go for inheritance
4.we will use 'extends' keyword to provide 'IS-A' relationship between two class

Advantages 
==========================
1.achive code-reusabilty
2.avoid redundancy
==========================

class A{
    
    public void encrypt(){}
    public void decrypt(){}
}

class B{
    
    public void encrypt(){}
    public void decrypt(){}
}
================================================
class Utility{
    
    public void encrypt(){}
    public void decrypt(){}
}


class A extends Utility{
    
}

class B extends Utility{
    
}
child class
===========
1.the class which takes features from another class is called child class

parent class
===========
1.the class which gives features to other class is called parent class
==============================================

steps to achive 'IS-A' or Inheritance
======================================
1.design parent class/super class
2.design child class/sub class
3.build relationship between two  using 'extends' keyword 

Inheritance Types
=====================================
1.Single inheritance
2.multilvel inheritance
3.heirarchy inheritance
4.multiple inheritance(using class-cannot support)-(using interface-not support)
===============================================================
polymorphism
===============================================================
poly-many
morphism-behaviour

1.method overloading -compiletime polymorphism - static binding
================================================================
1.method name same parameter should be diffrent
2.we can achive method overloading in single class

2.method overriding-Runtime polymorphism - dynamic binding
================================================================
1.method name same and parameter also should be same
2.we can achive method overriding using extends base class

final keyword  [final-finally-finalize]
================================================================
1.we can create class using final keyword
         Final  Class - we cannot extends
2.we can create method using final keyword
         Final  mathod - we cannot override
3.we can create variable using final keyword
         Final  variable- we cannot modify
===============================================================
this keyword -super keyword
===============================================================
this
========
1.this keyword is used to denote current object
2.this keyword is used to diffrentiate instance and local variables
3.we can call one constructor inside the another constructor in the same calss by using this keyword
4.3.we can call one method inside the another method in the same calss by using this keyword

super keyword
===============
1.super keyword is represents to denote parent class

usecase-1:
===========
if suclass and base class have same method then how to call base class method
 
 public void m1() {
        super.m1();
        System.out.println("B-m1 method calling");
        
    }
======================================================================
usecase-2:
===========
if suclass and base class have same variable then how to call base class varaible
 
 public void getName() {
        System.out.println(super.name);
        System.out.println(name);
    }

usecase-3:
==================================================================
super keyword is used to call base class constructor from subclass

E(){
        super();
        System.out.println("Sub Class constructor");
    }
=================================================================
public Employee(String employeeName, int phone) {
        super();
        this.employeeName = employeeName;
        this.phone = phone;
    }

================================================================
Encpsulation 
================================================================
1.Binding variables and methods into single unit is called encapsulation
2.Encapsulation is used to achive scecurity
3.POJO class is example for Encapsulation(Plain Old Java Object)
           a.getter()
           b.setter()
4.we can achive security by declaring variable as private
5.private variable cant access out side of the class
6.if you want to acces private variable outside of the class we should create getter and setter methods
================================================================

Access Specifier- Access modifier
===============================================================
package*
=========
public-[class-variable-method][scope-anywhere in the project]
private-[class-variable-method][scope-same package -same class]
protected-[class-variable-method][scope-same package -different class]
default-[class-variable-method][scope-same package - different class]

==============================================================
Abstraction-[hiding the implementation details to the user ]
===============================================================
The process of showing essential features to users by hiding the implementation details

we will design in abstraction in two ways
=========================================
1.abstract class
2.interface

Abstract class
===================================================
1.the class which is declared with 'abstract' keyword is called abstract class
2.abstract class contains only complete methods-[concrete methods]
3.abstract class contains only incomplete methods-[abstract method]
4.abstract class contains both  complete methods and incomplete methods
5.we can not create object for abstract class by developer
6.if you want to acsess abstract class we should extends from sub class
===================================================

abstract method
=======================================
1.the method which is declared with 'abstract' keyword is called abstract method
2.abstract method does not have the body
3.abstract method ends with semicolen

====================================

Abstract Vs Interface
====================================
1.Using abstract class we cant achive 100% abstraction
2.Using Interface we can achive 100% abstraction

Interface
===================================================
1.using 'interface' keyword we can create interface
2.interface contains only abstract methods
3.interfce does not allow instance variable
4.interface allows constants(-final variable)
5.we cant create object for interface
6.interface does not allow constructor
7.in interface final and static is optinal for final variable
8.if you want to use interface we should use 'implements' keyword
==================================================
HAS-A Relationship
===================
a class containing an instance of another class is called HAS-A Relationship

1.Composition
=================
Strong form HAS-A
=================
if a class composed with other class object and those class can not exist independently


2.Aggregation
=================
weak form HAS-A
=================
if a class composed with other class object and those class can  exist independently


Implementation classes
==================================================




String In java?
========================================
1.String is Prdefined Class in Java belongs to java.lang
2.we can create object for String two ways    
    String name="antony";---String literals
    String name1=new String("antony");-new keyword
3.String object is immutable
4. what is different between == and equals()
5.String is final class we can not extends

String methods
=========================================
1.charAt()
2.concat()
3.contains()
4.equals
5.startsWith
6.endswith
7.trim()
8.length()
9.toLowerCase()
10.toUpperCase()
11.substring()
12.split()

StringBuffer
=============
1.StringBuffer is predefined class belongs java.lang
2.StringBuffer mutable
3.performence is better then string
4.It is a thread safe


StringBuilder
=============
1.StringBuilder is predefined class belongs java.lang
2.StringBuilder is mutable
3.performence is better then StringBuffer
3.It is not a thread safe

==================================================================

String vs StringBuffer vs StringBuilder
=======================================

Overriding methods
=======================================
toString()-Object class method
finalize()
getclass()
hashcode()
getName()
=======================================
garbage collector-System.gc()
=======================================
System.gc is use to collect and remove un used object
System.gc() ic cllaing finalize() method internally


=========================================
Exception
=========================================
1.Exception is a event that intrupts normal flow of the application

        a.checked exception---Compile time exception
        b.un-checked exception--Run time exception

2.Exception Handling
========================================
try
catch
throws
throw
finally
user-defined exception
=======================================

testCase-1
===============
1.single exception

testCase-2
==============
1.multiple exception-(mutltiple try catch)



Solution--
========
 try with multiple catch block

Pre-Requirments
===================
1.Array
2.Implentation classes

SubInterface
==================
Collection Framework
====================
Framework-[Predefined-Semi Application]

1.Collections framework is entity which is used to store group of objects
2.Collections framework are growbale in nature
3.In Collection we can store any type of object
4.Collection framework means it contains set of classes and interfaces
5.Collection framework providing ready made methods to perform common operations like INSERT, DELETE, RETRIVE, UPDATE, SORT

Collections Hierarchy
=====================================
1.Collection-(I)
2.List-(I)
3.Set-(I)
4.Queue-(I)
5.Iiterable-(I)
6.Map-(I)

Cursor
====================================
1.Enumeration
2.iterator

====================================
List:It is used to store group of objects(duplicates are allowed)
Set:It is used to store group of objects(duplicates are not allowed)
Queue:It is used to store group of bjects(FIFO)
Map:It is used to store group of bjects(Key-value)

List Interface
===================================
1.It is of child interface Collection interface
2.List interface having 4 implementation classes

        a.ArrayList implements List
        b.LinkedList implements List
        c.Vector implements List
        d.Stack implements List

How to use List interface
=================================
List list=new ArrayList();----valid
List list=new LinkedList();----valid
List list=new VectorList();----valid
List list=new Stack();----valid
List list=new List();----Not valid

ArrayList
================================
1.ArrayList is class implemented By List interface
2.Duplicates Objects are allowed
3.it is maintains inertion order
4.it is allow null 
5.Internal data structure of arraylist is growbale array
===============================



Wrapper Classes
==============================
byte-Byte
short-Short
int-Integer
long=Long
float=Float
double=Double
boolean=Boolean
char=Charector






File

JDBC+mysql
========================================
Servlet+appache Tomcat 

Spring Framework
==========================================

JSE-java -java standard edition(core java)
JEE-J2E  -java enterprise edition(servlet-jsp)

=========================================

JDK+JRE+JVM
========================================
JDK-java development kit
JRE-Java Runtime environment
JVM=java virtual machine

========================================








========================================
f6
f5
f7
f8
=======================================

design pattern
=======================================
